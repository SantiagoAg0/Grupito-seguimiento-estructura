public class Bicola<T> {
    private Nodo<T> frente;
    private Nodo<T> fin;
    private int tam;
    
    // Constructor
    public Bicola() {
        this.frente = null;
        this.fin = null;
        this.tam = 0;
    }
    
    // Agregar elemento al inicio
    public void agregarAlInicio(T dato) {
        Nodo<T> nuevoNodo = new Nodo<>(dato);
        
        if (estaVacia()) {
            frente = nuevoNodo;
            fin = nuevoNodo;
        } else {
            nuevoNodo.setSiguiente(frente);
            frente.setAnterior(nuevoNodo);
            frente = nuevoNodo;
        }
        tam++;
    }
    
    // Agregar elemento al final
    public void agregarAlFin(T dato) {
        Nodo<T> nuevoNodo = new Nodo<>(dato);
        
        if (estaVacia()) {
            frente = nuevoNodo;
            fin = nuevoNodo;
        } else {
            fin.setSiguiente(nuevoNodo);
            nuevoNodo.setAnterior(fin);
            fin = nuevoNodo;
        }
        tam++;
    }
    
    // Eliminar elemento del inicio
    public T eliminarDelInicio() {
        if (estaVacia()) {
            return null;
        }
        
        T dato = frente.getDato();
        
        if (frente == fin) { // Solo hay un elemento
            frente = null;
            fin = null;
        } else {
            frente = frente.getSiguiente();
            frente.setAnterior(null);
        }
        tam--;
        return dato;
    }
    
    // Eliminar elemento del final
    public T eliminarDelFin() {
        if (estaVacia()) {
            return null;
        }
        
        T dato = fin.getDato();
        
        if (frente == fin) { // Solo hay un elemento
            frente = null;
            fin = null;
        } else {
            fin = fin.getAnterior();
            fin.setSiguiente(null);
        }
        tam--;
        return dato;
    }
    
    // Ver el elemento del inicio sin eliminarlo
    public T verInicio() {
        if (estaVacia()) {
            return null;
        }
        return frente.getDato();
    }
    
    // Ver el elemento del final sin eliminarlo
    public T verFin() {
        if (estaVacia()) {
            return null;
        }
        return fin.getDato();
    }
    
    // Verificar si la bicola está vacía
    public boolean estaVacia() {
        return frente == null;
    }
    
    // Obtener el tamaño de la bicola
    public int tamaño() {
        return tam;
    }
    
    // Mostrar elementos de inicio a fin
    public void mostrar() {
        if (estaVacia()) {
            System.out.println("Bicola vacía");
            return;
        }
        
        Nodo<T> actual = frente;
        System.out.print("Bicola (inicio → fin): ");
        while (actual != null) {
            System.out.print(actual.getDato() + " ");
            actual = actual.getSiguiente();
        }
        System.out.println();
    }
    
    // Mostrar elementos de fin a inicio
    public void mostrarReversa() {
        if (estaVacia()) {
            System.out.println("Bicola vacía");
            return;
        }
        
        Nodo<T> actual = fin;
        System.out.print("Bicola (fin → inicio): ");
        while (actual != null) {
            System.out.print(actual.getDato() + " ");
            actual = actual.getAnterior();
        }
        System.out.println();
    }
    
    // Vaciar la bicola
    public void vaciar() {
        frente = null;
        fin = null;
        tam = 0;
    }
}